// Registro de usuario ()

router.post("/users/create", async (req, res) => {
    const { mail, name, surname, dni, date, password, role = 'cliente' } = req.body;
    const { phone, address } = req.body;

    if (!mail || !name || !surname || !dni || !date || !password|| !phone || !address) {
        return res.status(400).send("Todos los campos son obligatorios");
    }

    const dniInt = parseInt(dni, 10);
    if (isNaN(dniInt)) return res.status(400).send("El DNI debe ser un número válido");

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(mail)) return res.status(400).send("Correo electrónico inválido");

    const age = calculateAge(date);

    try {
        const existingUser = await prisma.user.findFirst({
            where: { OR: [{ mail }, { dni: dniInt }] }
        });
        if (existingUser) return res.status(400).send("Ya existe un usuario con ese mail o DNI");

        const hashedPassword = await bcrypt.hash(password, 10);
//        const user = await prisma.user.create({
//          data: {
//                mail,
//                name,
//                surname,
//                dni: dniInt,
//                date,
//                age,
//                password: hashedPassword,
//                role
//            }
//        });
const user = await prisma.user.create({
    data: {
        mail,
        name,
        surname,
        dni: dniInt,
        date,
        age,
        password: hashedPassword,
        role,
        phone,
        address
    }
});

        console.log(`Usuario ${name} ${surname} registrado con éxito`);
        res.send("¡Usuario registrado con éxito!");
    } catch (error) {
        console.error("Error al registrar usuario:", error);
        res.status(500).send("Error interno del servidor");
    }
});



// Leer Usuario 

router.get("/users", authenticateToken, async (req, res) => {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 5;
    const offset = (page - 1) * limit;

    try {
        const total = await prisma.user.count();
        const totalPages = Math.ceil(total / limit);
        const users = await prisma.user.findMany({
            skip: offset,
            take: limit
        });

        res.send({ total, totalPages, page, users });
    } catch (err) {
        console.error(err);
        res.status(500).send("Error al obtener usuarios");
    }
});



// Actualizar Usuario

router.put("/users/update/:id", authenticateToken, async (req, res) => {
    const { id } = req.params;
    const { mail, name, surname, dni, date, password } = req.body;

    const { phone, address } = req.body;

    if (!mail || !name || !surname || !dni || !date || !password|| !phone || !address) {
        return res.status(400).send("Todos los campos son obligatorios");
    }

    const dniInt = parseInt(dni, 10);
    if (isNaN(dniInt)) return res.status(400).send("El DNI debe ser un número válido");

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(mail)) return res.status(400).send("Correo electrónico inválido");

    const age = calculateAge(date);

    try {
        const existingUser = await prisma.user.findUnique({ where: { id: parseInt(id) } });
        if (!existingUser) return res.status(404).send("Usuario no encontrado");

        /*
        const hashedPassword = await bcrypt.hash(password, 10);
        const updatedUser = await prisma.user.update({
        where: { id: parseInt(id) },
        data: {
            mail,
            name,
            surname,
            dni: dniInt,
            date,
            age,
            password: hashedPassword
    }
});
*/
       
// ✅ Solo hasheamos la contraseña si se envió una nueva
        const updatedData = {
            mail,
            name,
            surname,
            dni: dniInt,
            date,
            age
        };

        if (password && password !== "") {
            updatedData.password = await bcrypt.hash(password, 10);
        }
//actualización
        const updatedUser = await prisma.user.update({
            where: { id: parseInt(id) },
            data: updatedData
        });


        console.log(`Usuario ${name} ${surname} actualizado con éxito`);
        res.send({
        message: "¡Usuario actualizado con éxito!",
        user: updatedUser
        });
        //res.send("¡Usuario actualizado con éxito!");
    } catch (error) {
        console.error("Error al actualizar usuario:", error);
        res.status(500).send("Error interno del servidor");
    }
});
